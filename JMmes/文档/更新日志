2018-12-14

修改日志打印逻辑，在Linux下不输出访问信息

部署注意：
    需上传如下Jar：
     platform.jar       更新
     tomcat*.jar        新增

2018-09-28

1. 系统参数设定获取方式

    1.1 前端：通过EL表达式获取
        如：const file_server="${applicationScope.SYS_CONFIG_KEY.FILE_SERVER}";
    ${applicationScope.SYS_CONFIG_KEY.参数CODE}

    1.2 后台
        1.2.1 注入SystemConfigServiceImpl
        1.2.2 获取参数值：
                SystemConfigServiceImpl.get("参数代码");


2018-08-16

1. 上传RockWell的jar包
2. 完善了上传组件，参考 “文档/文件上传” 中的说明

2018-08-16
1. 删除Atomikos配置，XA导致系统性能地下


2018-08-11

1.ext.js
    新增添加行方法：ext.easyui.grid.append("表格ID","行数据JSON{}")
    新增添加行方法：ext.easyui.grid.appendAndEdit("表格ID","行数据JSON{}")，同时进入编辑状态

2018-08-10

1. 新增LLWebUtils工具类，继承了WebUtils，新增factory()方法，返回相应的工厂代码
2. 新增柳州工厂代码常量，FactoryConstant.LIU_ZHOU_CODE="8003";
3. 新增柳州工厂名称常量，FactoryConstant.LIU_ZHOU_NAME="柳州工厂";
4. 涉及工厂、机构编号的时候，可以直接引用,已有的实体中，改为这种方式，以后基本可以无视这个字段
                一般字段定义按照如下的方式定义：
        private String AGEN_NAME_S=FactoryConstant.LIU_ZHOU_NAME;
        private String AGENC_NO_S=FactoryConstant.LIU_ZHOU_CODE;


2018-08-07
1. 修改后台返回的格式
    {
        code:"",		//字符串类型
        message:"",		//返回的消息
        data:[]或{}		//返回的数据
    }

2. code值部分枚举
    0           执行正常
    -1          会话过期（无需关注，前后端自动处理）
    1           系统异常（无需关注，前后端自动处理）
    其他代码    具体的业务异常代码
    
    前端JS中，可以直接使用OK，EXPIRED,ERROR变量，分别表示“0”，“-1”，“1”

3. 后台Response对象，抛弃bizError方法
	
	Response.error(code,message,data);//具体的异常代码
	Response.error(message,data);//默认系统异常
	Response.error(code,message);//具体异常代码，消息
	Response.error(data);//系统异常，返回数据
	
4. 查询操作
	
	在对应的input或者easyui控件上，支持如下自定义属性
	
	in="true"
	beginWith="true"
	endWith="true"
	like="true"
	
	分别表示：在列表中、以什么开头、以什么结尾、完全模糊查询

4. Excel导入、导出
    参考 Excel导入.docx
